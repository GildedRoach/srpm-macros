## These macros REQUIRE that the macro npm_name be defined or the module be passed to them

%__npm() %{lua:
   if rpm.expand('%["%{rpmversion}" < "4.20"]') == '1' then
     print("/usr/bin/env NPM_CONFIG_USERCONFIG=%{_builddir}/.npmrc NPM_CONFIG_GLOBALCONFIG=%{_builddir}/npmrc NPM_CONFIG_CACHE=%{_builddir}/.npm NPM_CONFIG_LOGLEVEL=error NPM_CONFIG_FUND=false NPM_CONFIG_INIT_MODULE=%{_builddir}/.npm-init.js NPM_CONFIG_INIT.MODULE=%{_builddir}/.npm-init.js NPM_CONFIG_LOGS_DIR=null /usr/bin/npm")
   else
     print("/usr/bin/env NPM_CONFIG_USERCONFIG=%{builddir}/.npmrc NPM_CONFIG_GLOBALCONFIG=%{builddir}/npmrc NPM_CONFIG_CACHE=%{builddir}/.npm NPM_CONFIG_LOGLEVEL=error NPM_CONFIG_FUND=false NPM_CONFIG_INIT_MODULE=%{builddir}/.npm-init.js NPM_CONFIG_INIT.MODULE=%{builddir}/.npm-init.js NPM_CONFIG_LOGS_DIR=null /usr/bin/npm")
   end}

# For use in prep section
# -n: "Name." Must be the CANONICAL name of the Node module as hosted on the NPM registry
# npm_prep -n nodepkgname
%npm_prep(n:) %{lua:
   if opt.n then
     rpm.define("npm_name " .. rpm.expand("%{-n*}"))
   end
   local module = rpm.expand("%{?npm_name}")
   if (module == '%{npm_name}') or (module == '%npm_name') or (module == '') then
     error("%npm_name is not defined. Please define it using a global macro or with the -n flag.")
   end}                                                  \
   %{__npm} install -g %{npm_name}@%{version} --prefix=. \
   %setup -T -D -n lib/node_modules/%{npm_name}

# Fetch the Node tests within the spec. Uses Git commands that ONLY download specified directories
# Files in the root of the repository need only their name
# -u: "URL." This MUST be set if the URL used in the spec is not automatically detectable as a clonable Git repository
# URL MAY include ".git" when using -u flag
# fetch_node_tests -u https://github.com/nodepkgdev/nodepkgname /tests .eslintrc.json
# Note that if tests
%fetch_node_tests(u:) %{lua:
   cmd = 'git clone -n --depth=1 --filter=tree:0 -q -j$(nproc) '
   if macros["1"] == null then
     error("Test folders/files not specified. Please list them, separated by spaces.")
   else
     for i, file in ipairs(arg) do
       if file:find('/') and string.sub(file, 1, 1) ~= '/' then
         error("Folders holding test files must start with '/'")
       end
     end
      rpm.define("_nodetests " .. table.concat(arg, " "))
   end
   if rpm.expand('%["%{rpmversion}" < "4.20"]') == '1' then
     srcdir = ' %{_builddir}/sourcetests'
   else
     srcdir = '%{builddir}/sourcetests'
   end
   rpm.define("_nodetestdir " .. srcdir)
   if (rpm.expand("%{?url}"):find('git') or rpm.expand("%{?url}"):find('codeberg')) and rpm.expand("%{?-u*}") == '' then
     print(cmd .. rpm.expand("%{url}") .. ' && cd ' .. srcdir)
   elseif opt.u then
     if not rpm.expand("%{-u*}"):find('://') and rpm.expand("%{-u*}"):find('.') then
       error("-u argument is not a clonable URL. Please make sure it is in the format of 'https://github.com/repo/project'")
     else
       print(cmd .. rpm.expand("%{-u*} ") .. srcdir .. ' && cd ' .. srcdir)
     end
   else
     error("URL could not be automatically identified as clonable and -u is not set. Please set a Git repository hosting the tests for this module using the -u option.")
   end}                                            \
   git switch -c v%{version} -q                    \
   git sparse-checkout set --no-cone %{_nodetests} \
   git checkout -q                                 \
   cd ~-

# Install package. Defaults to nodejs_sitelib unless jsmeta is set.
# -a: "Arch." Install to sitearch instead. Currently unneeded as nodejs_sitelib and nodejs_sitearch are the same.
# -s: "Symlink." Install bindir symlink as a different name than the npm_name.
# TODO: Add READELF check for if -a is not set?
%npm_install(as:) %{lua:
   local prepbindir = rpm.expand("%{buildsubdir}/bin/")
   if opt.a and rpm.expand("%{with js}") == '1' then
     error("'-a' cannot be used for JS packages.")
   elseif rpm.expand("%{with js}") == '1' and not opt.a then
     installdir = "%{buildroot}%{_jsdir}/%{npm_name}"
       if not posix.stat(prepbindir .. " *.js") then
         installbin = rpm.expand("%{_jsdir}/%{npm_name}/bin/%{npm_name}")
         installbin = rpm.expand("%{_jsdir}/%{npm_name}/bin/%{npm_name}")
       else
         installbin = rpm.expand("%{_jsdir}/%{npm_name}/bin/%{npm_name}%{?_js}")
         installbin = rpm.expand("%{_jsdir}/%{npm_name}/bin/%{npm_name}%{?_js}")
       end
     end
   elseif opt.a then
   -- Note: The below is a LIMITED check on if a package is a JS package to reduce macro runtime. jspkgcheck should be used for a better one.
     if posix.stat(prepbindir .. " *.js") then
       error("This is a JS package. Please set %jsmeta somewhere in the spec before the prep secion.")
     else
     elseif
       installdir = "%{buildroot}%{nodejs_sitearch}/%{npm_name}"
       if not posix.stat(prepbindir .. " *.js") then
       installbin = rpm.expand("%{nodejs_sitearch}/%{npm_name}/bin/%{npm_name}")
     end
   else
     if posix.stat(prepbindir .. " *.js") then
       error("This is a JS package. Please set %jsmeta somewhere in the spec before the prep section.")
     else
       installdir = "%{buildroot}%{nodejs_sitelib}/%{npm_name}"
       installbin = rpm.expand("%{nodejs_sitelib}/%{npm_name}/bin/%{npm_name}%{?_js}")
     end
   end
   bindir = rpm.expand("%{buildroot}%{_bindir}/")
   rpm.execute('mkdir', '-p', installdir)
   rpm.execute('mkdir', '-p', bindir)
   print("cp -r ./* -t " .. installdir)
   if opt.s then
     posix.symlink(installbin, bindir .. rpm.expand("%{-s*}"))
   else
     posix.symlink(installbin, bindir .. rpm.expand("%{npm_name}"))
   end}

# Best used in check section
# This will fail if ANY security vulnerabilities are found. It SHOULD NOT fail for other issues.
%npm_audit()                        \
   (                                \
   set -euo pipefail                \
   %{__npm} audit --audit-level=low \
   )

# Best used in prep section if check fails
# -d can be used to check what it will do before running, especially if using -f
# -f should ONLY be used if absolutely necessary and SHOULD be tested locally on the module first, as it will potentially break dependencies
# Reference: https://docs.npmjs.com/cli/v7/commands/npm-audit
%npm_audit_fix(dfo:O:p)                              \
   (                                                 \
   set -euo pipefail                                 \
   %{__npm} audit fix %{shrink:                      \
   %{-d:--dry-run}                                   \
   %{-f:--force}                                     \
   %{-o:--omit=%{-o*}}                               \
   %{-O:--only=%{-O*}}                               \
   %{-p:--package-lock-only}                         \
   %{nil}                                            \
}                                                    \
)

## Below require js-license-checker as a build dep

# Make this a macro so it can be called on its own for any reason
%__npm_license_checker() /usr/bin/license-checker

# Outputs a summary of the licenses used in the main package and bundled dependencies
# Useful for filling out the License section
%npm_license_summary()                \
   (                                  \
   set -euo pipefail                  \
   %{__npm_license_checker} --summary \
   )

# Outputs all used licenses and removes all irrelevent info, especially paths
# Since this is a license file, the repository and publisher information have been removed, but they SHOULD ALWAYS be left in an unaltered state in the bundled module
%npm_license()                                         \
   (                                                   \
   set -euo pipefail                                   \
   %{__npm_license_checker} --limitAttributes licenses \
   )

# Only applicable if a test folder is provided from a source repo using fetch_node_tests
# Please not that many NodeJS projects have test methods that cannot be covered by this macro such as ones that should be run by NodeJS itself
# Other tests include Mocha, Yarn, ESLint, and more that MAY be possible to accomodate with some more research and testing
# -R: Direct duplicate of -R flag. Project dependent.
# -v: Direct duplicate of -v flag. Project dependent.
%node_self_test(Rv)                                    \
   for test in %{?_nodetests}; do                      \
      if [[ $test == /* ]]; then                       \
        NODE_ENV=test bin/%{npm_name}%{?_js} %{shrink: \
        %{-R:-R}                                       \
        %{-v:-v}                                       \
        } %{_nodetestdir}$test                         \
      fi
   done

# Generic NPM tests
%npm_test()      \
   %{__npm} test
