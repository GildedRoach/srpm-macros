## These macros REQUIRE that the macro npm_name be defined or the module be passed to them

# Common env vars to be used for all NPM and descendents' macros
%npm_common_vars NPM_CONFIG_USERCONFIG=%{rpmbuilddir}/.npmrc NPM_CONFIG_GLOBALCONFIG=%{rpmbuilddir}/npmrc NPM_CONFIG_CACHE=%{rpmbuilddir}/.npm NPM_CONFIG_LOGLEVEL=error NPM_CONFIG_FUND=false NPM_CONFIG_UPDATE_NOTIFIER=false NO_UPDATE_NOTIFIER=1 NPM_CONFIG_INIT_MODULE=%{rpmbuilddir}/.npm-init.js

# Build flags for NPM so they can be called independently if needed for any reason
%npm_buildflags --userconfig=%{rpmbuilddir}/.npmrc --globalconfig=%{rpmbuilddir}/npmrc --cache=%{rpmbuilddir}/.npm --loglevel=error --fund=false --update-notifier=false --init-module=%{rpmbuilddir}/.npm-init.js

# Only used if vendoring NodeJS
%nvm_dir %{rpmbuilddir}/.nvm

# ONLY use if NodeJS is not usable from the repos for some reason (such as needing non-LTS NodeJS)
# -v: "Version." The version of NodeJS to install. Required flag.
%vendor_nodejs(v:)                                                                                             \
%{!?-v*:%{error:NodeJS version to install required to be passed using the -v flag.}}                           \
export NVM_DIR="%{nvm_dir}"                                                                                    \
mkdir -p $NVM_DIR                                                                                              \
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash &>/dev/null                    \
. "$NVM_DIR/nvm.sh" &>/dev/null                                                                                \
. "$NVM_DIR/bash_completion" &>/dev/null                                                                       \
nvm install %{?-v*}                                                                                            \
%global __nodejs %{nvm_dir}/versions/node/v*/bin/node                                                          \
%bcond vendored_nodejs 1

%__npm /usr/bin/env %{npm_common_vars} %{?with_vendored_nodejs:%{nvm_dir}/versions/node/v*/bin/npm}%{!?with_vendored_nodejs:/usr/bin/npm}

# NOTE: NPX can escape the variables of the main shell in some situations. It may be necessary to call NPM from NPX with npm_buildflags set for consistent behavior.
%__npx /usr/bin/env %{npm_common_vars} %{?with_vendored_nodejs:%{nvm_dir}/versions/node/v*/bin/npx}%{!?with_vendored_nodejs:/usr/bin/npx}

# While Bun itself doesn't use NPM env vars directly, some NodeJS build deps such as Electron Builder do
%__bun /usr/bin/env %{npm_common_vars} BUN_HOME=%{rpmbuilddir}/.bun BUN_RUNTIME_TRANSPILER_CACHE_PATH=0 /usr/bin/bun

# ONLY use if PNPM is not usable from the repos for some reason
# -v "Version." Choose a specific version of PNPM to vendor
%vendor_pnpm(v:)                                                               \
PNPM_HOME=%{rpmbuilddir}/pnpm curl -fsSL https://get.pnpm.io/install.sh | sh - \
%{?-v:%{rpmbuilddir}/pnpm/pnpm env use --global %{-v*}}                        \ 
%bcond vendored_pnpm 1

# While PNPM itself doesn't use NPM env vars directly, some NodeJS build deps such as Electron Builder do
%__pnpm /usr/bin/env %{npm_common_vars} PNPM_HOME=%{rpmbuilddir}/pnpm %{?with_vendored_pnpm:%{rpmbuilddir}/pnpm/pnpm}%{!?with_vendored_pnpm:/usr/bin/pnpm}

# While Yarn itself doesn't use NPM env vars directly, some NodeJS build deps such as Electron Builder do
%__yarn /usr/bin/env %{npm_common_vars} YARN_CACHE_FOLDER=%{rpmbuilddir}/yarn /usr/bin/yarn

# For use in prep section
# WARNING: Do NOT use in the prep section of projects using NPM that are not NodeJS packages!
# -n: "Name." Must be the CANONICAL name of the Node module as hosted on the NPM registry
# npm_prep -n nodepkgname
%npm_prep(n:) %{lua:
   if opt.n then
     rpm.define("npm_name " .. rpm.expand("%{-n*}"))
   end
   local module = rpm.expand("%{?npm_name}")
   if not rpm.isdefined("npm_name") then
     error("%npm_name is not defined. Please define it using a global macro or with the -n flag.")
   end}                                                  \
   %{__npm} install -g %{npm_name}@%{version} --prefix=. \
   %setup -T -D -n lib/node_modules/%{npm_name}

# Fetch the Node tests within the spec. Uses Git commands that ONLY download specified directories
# Files in the root of the repository need only their name
# -u: "URL." This MUST be set if the URL used in the spec is not automatically detectable as a clonable Git repository
# URL MAY include ".git" when using -u flag
# fetch_node_tests -u https://github.com/nodepkgdev/nodepkgname /tests .eslintrc.json
%fetch_node_tests(u:) %{lua:
  cmd = 'git clone -n --depth=1 --filter=tree:0 -q -j$(nproc) '
  if not arg[1] then error("Test folders/files not specified. Please list them, separated by spaces.") end
  for i, file in ipairs(arg) do
    if file:find('/') and string.sub(file, 1, 1) ~= '/' then
      error("Folders holding test files must start with '/'")
    end
  end
  macros["_nodetests"] = table.concat(arg, " ")
  srcdir = macros["rpmbuilddir"] .. "/sourcetests"
  macros["_nodetestdir"] = srcdir
  if (rpm.expand("%{?url}"):find('git') or rpm.expand("%{?url}"):find('codeberg')) and not opt.u then
    print(cmd .. macros["url"] .. ' && cd ' .. srcdir)
  elseif opt.u then
    if rpm.expand("%{-u*}"):find('://') and rpm.expand("%{-u*}"):find('.') then
      print(cmd .. rpm.expand("%{-u*} ") .. srcdir .. ' && cd ' .. srcdir)
    else
      error("-u argument is not a clonable URL. Please make sure it is in the format of 'https://github.com/repo/project'")
    end
  else
    error("URL could not be automatically identified as clonable and -u is not set. Please set a Git repository hosting the tests for this module using the -u option.")
  end}                                            \
  git switch -c v%{version} -q                    \
  git sparse-checkout set --no-cone %{_nodetests} \
  git checkout -q                                 \
  cd ~-

# Install package. Defaults to nodejs_sitelib unless jsmeta is set.
# -a: "Arch." Install to sitearch instead. Currently unneeded as nodejs_sitelib and nodejs_sitearch are the same.
# -s: "Symlink." Install bindir symlink as a different name than the npm_name.
# TODO: Add READELF check for if -a is not set?
%npm_install(as:) %{lua:
  if not rpm.isdefined("npm_name") or not (rpm.isdefined("buildsubdir") and not rpm.isdefined("_buildsubdir")) then
    error("Package has not been prepped! Please run %npm_prep first.")
  else
    module = rpm.expand("%{?npm_name}")
  end
  prepbindir = rpm.expand("%{buildsubdir}/bin/")
  moduledir = rpm.expand("%{buildroot}%{nodejs_sitelib}/%{npm_name}")
  if opt.a and rpm.expand("%{with js}") == '1' then
    error("'-a' cannot be used for JS packages.")
  elseif rpm.expand("%{with js}") == '1' and not opt.a then
    installdir = rpm.expand("%{buildroot}%{_jsdir}/%{npm_name}")
      if not posix.stat(prepbindir .. " *.js") then
        installbin = rpm.expand("%{_jsdir}/%{npm_name}/bin/%{npm_name}")
      else
        installbin = rpm.expand("%{_jsdir}/%{npm_name}/bin/%{npm_name}%{?_js}")
      end
  elseif opt.a then
  -- Note: The below is a LIMITED check on if a package is a JS package to reduce macro runtime. jspkgcheck should be used for a better one.
    if posix.stat(prepbindir .. " *.js") then
      error("This is a JS package. Please set %jsmeta somewhere in the spec before the prep secion.")
    else
      installdir = rpm.expand("%{buildroot}%{nodejs_sitearch}/%{npm_name}")
      installbin = rpm.expand("%{nodejs_sitearch}/%{npm_name}/bin/%{npm_name}%{?_js}")
    end
  else
    if posix.stat(prepbindir .. " *.js") then
      error("This is a JS package. Please set %jsmeta somewhere in the spec before the prep section.")
    else
      installdir = moduledir
      installbin = rpm.expand("%{nodejs_sitelib}/%{npm_name}/bin/%{npm_name}%{?_js}")
    end
  end
  bindir = rpm.expand("%{buildroot}%{_bindir}/")
  print("mkdir -p " .. installdir .. "\\n")
  print("mkdir -p " .. bindir .. "\\n")
  print("cp -r ./* -t " .. installdir .. "\\n")
    if rpm.expand("%{with js}") == '1' then
    -- Symlink to the regular node_modules install dir for regular behavior
      print("mkdir -p " .. moduledir .. "\\n")
      print("ln -sf " .. rpm.expand("%{_jsdir}/%{npm_name} ") .. moduledir .. "\\n")
    end
  if opt.s then
    if rpm.expand("%{?node_bin_symlink}") ~= rpm.expand("%{-s*}") then
      rpm.define("node_bin_symlink " .. rpm.expand("%{-s*}"))
    end
  else
    rpm.define("node_bin_symlink " .. module)
  end
  print("ln -sf " .. installbin .. " " .. bindir .. macros["node_bin_symlink"])
}

# Best used in check section
# This will fail if ANY security vulnerabilities are found. It SHOULD NOT fail for other issues.
%npm_audit()                        \
   (                                \
   set -euo pipefail                \
   %{__npm} audit --audit-level=low \
   )

# Best used in prep section if check fails
# -d can be used to check what it will do before running, especially if using -f
# -f should ONLY be used if absolutely necessary and SHOULD be tested locally on the module first, as it will potentially break dependencies
# Reference: https://docs.npmjs.com/cli/v7/commands/npm-audit
%npm_audit_fix(dfo:O:p)                              \
   (                                                 \
   set -euo pipefail                                 \
   %{__npm} audit fix %{shrink:                      \
   %{-d:--dry-run}                                   \
   %{-f:--force}                                     \
   %{-o:--omit=%{-o*}}                               \
   %{-O:--only=%{-O*}}                               \
   %{-p:--package-lock-only}                         \
   %{nil}                                            \
}                                                    \
)

# For use in check section
# ONLY use if package uses bundled Node dependencies.
# NOTE: Technically Bun audit is a wrapper for NPM audit, however it unfortunately lacks the ability to FIX vulnerabilities
# There is no timeline for this being implemented, but there is a tracking issue: https://github.com/oven-sh/bun/issues/20238
# For now, you need to fix vulnerabilities, please see npm_audit_fix
# NOTE: While alarming, if the audit fails on a dependency that is NOT bundled in the final program, you can ignore it.
%bun_audit() NPM_CONFIG_AUDIT_LEVEL=low %{__bun} audit

# For use in check section
# ONLY use if package uses bundled Node dependencies.
# NOTE: While alarming, if the audit fails on a dependency that is NOT bundled in the final program, you can ignore it.
%pnpm_audit() NPM_CONFIG_AUDIT_LEVEL=low %{__pnpm} audit

# Fix dependencies using PNPM.
# WARNING: Does NOT support all the options NPM audit fix does. It may be preferable to use that instead as this will also fix build dependencies.
%pnpm_audit_fix() NPM_CONFIG_AUDIT_LEVEL=low %{__pnpm} audit --fix

# Approve dependency scripts if needed.
# -g: Direct duplicate of "-g" (global).
%pnpm_approve_builds(g) %{__pnpm} approve-builds %{-g:-g}

# For use in check section
# ONLY use if package uses bundled Node dependencies.
# Unfortunately, like Bun, Yarn lacks a built in way to fix vulnerabilities.
# If you need to fix vulnerabilities, please see npm_audit_fix
# NOTE: While alarming, if the audit fails on a dependency that is NOT bundled in the final program, you can ignore it.
%yarn_audit() NPM_CONFIG_AUDIT_LEVEL=low %{__yarn} audit

## Below require js-license-checker as a build dep

# Make this a macro so it can be called on its own for any reason
%__npm_license_checker() /usr/bin/license-checker

# Outputs a summary of the licenses used in the main package and bundled dependencies
# Useful for filling out the License section
%npm_license_summary()                \
   (                                  \
   set -euo pipefail                  \
   %{__npm_license_checker} --summary \
   )

# Outputs all used licenses and removes all irrelevent info, especially paths
# Since this is a license file, the repository and publisher information have been removed, but they SHOULD ALWAYS be left in an unaltered state in the bundled module
%npm_license()                                         \
   (                                                   \
   set -euo pipefail                                   \
   %{__npm_license_checker} --limitAttributes licenses \
   )

# Only applicable if a test folder is provided from a source repo using fetch_node_tests
# Please not that many NodeJS projects have test methods that cannot be covered by this macro such as ones that should be run by NodeJS itself
# Other tests include Mocha, Yarn, ESLint, and more that MAY be possible to accomodate with some more research and testing
# -R: Direct duplicate of -R flag. Project dependent.
# -v: Direct duplicate of -v flag. Project dependent.
%node_self_test(Rv)                                                        \
   for test in %{?_nodetests}; do                                          \
      if [[ $test == /* ]]; then                                           \
        NODE_ENV=test %{buildroot}%{_bindir}/%{node_bin_symlink} %{shrink: \
        %{-R:-R}                                                           \
        %{-v:-v}                                                           \
        } %{_nodetestdir}$test                                             \
      fi
   done

# Generic NPM tests
%npm_test()      \
   %{__npm} test
