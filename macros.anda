# by default, add a bcond_without for a mold linker
# https://rpm-software-management.github.io/rpm/manual/conditionalbuilds.html
# only enable this on fedora
%with_mold 0%{?fedora:1}

# git_clone [<repo_url>] [<ref>]
%git_clone() %{lua:
  local url = macros["1"] or macros.url
  if not url then error("%url is not defined") end
  local ref = macros["2"] or macros.commit or macros.version
  if not ref then error("%commit / %version is not defined") end
  if (#ref ~= 40) and not (ref:find("%X")) then
    error("Please provide the full commit sha")
  end
  local dir = (url:gsub("/(%.git)?$", "")):gsub("^.+/", ""):gsub("%.git", "")
  local command = 'git clone --recurse-submodules -q -j$(nproc) ' .. url
  if (ref:len() == 40) and not(ref:find("%X")) then
    command = command .. ' --depth 1 --revision ' .. ref
  else
    command = command .. ' --depth 1 -b ' .. ref .. ' || ' .. command .. ' --depth 1 -b v' .. ref
  end
  command = command .. ' && cd ' .. dir
  macros.buildsubdir = dir
  print(command)
}

%evr %{?epoch:%{epoch}:}%{version}-%{release}

%rpmbuilddir %{?builddir}%{?!builddir:%{_builddir}}

%elvish_completions_dir %_datadir/elvish/lib/completions

# pkg_completion -Bbefz -n pkgname cmd1 cmd2 ...
# -B: bash (but the completion file doesn't have `.bash` extension)
# -b: bash
# -e: elvish
# -f: fish
# -z: zsh
# -n <pkgname>: name of the current package (default `%name`)
# cmd1 ...: the commands the completion files are for
%pkg_completion(Bbefzn:) %{lua:
  local shells = {}
  local pkg = macros["-n*"] or macros["name"]
  local bins_num = tonumber(rpm.expand("%#"))
  local bins = {}
  local evr = macros["evr"]
  
  for i = 1, bins_num do
    bins[i] = macros[i]
  end
  if bins_num == 0 then
    bins[1] = pkg
    bins_num = 1
  end
  
  function format_print(sh, req)
    local sh_proper = sh:sub(1,1):upper()..sh:sub(2)
    print("%package -n "..pkg.."-"..sh.."-completion\\n")
    print("Summary: "..sh_proper.." completion for "..pkg.."\\n")
    print("Requires: "..pkg.." = "..evr.."\\n")
    print("Requires: "..req.."\\n")
    print("Supplements: ("..pkg.." and "..req..")\\n")
    print("BuildArch: noarch\\n\\n")
    print("%description -n "..pkg.."-"..sh.."-completion\\n")
    print(sh_proper.." command line completion support for "..pkg..".\\n\\n")
    print("%files -n "..pkg.."-"..sh.."-completion\\n")
  end

  if rpm.isdefined("-b") then
    format_print("bash", "bash-completion")
    for i = 1, bins_num do
      print(rpm.expand("%bash_completions_dir/"..bins[i]..".bash\\n"))
    end
    print("\\n")
  end
  if rpm.isdefined("-B") then
    format_print("bash", "bash-completion")
    for i = 1, bins_num do
      print(rpm.expand("%bash_completions_dir/"..bins[i].."\\n"))
    end
    print("\\n")
  end
  if rpm.isdefined("-e") then
    format_print("elvish", "elvish")
    for i = 1, bins_num do
      print(rpm.expand("%elvish_completions_dir/"..bins[i]..".elv\\n"))
    end
    print("\\n")
  end
  if rpm.isdefined("-f") then
    format_print("fish", "fish")
    for i = 1, bins_num do
      print(rpm.expand("%fish_completions_dir/"..bins[i]..".fish\\n"))
    end
    print("\\n")
  end
  if rpm.isdefined("-z") then
    format_print("zsh", "zsh")
    for i = 1, bins_num do
      print(rpm.expand("%zsh_completions_dir/_"..bins[i].."\\n"))
    end
    print("\\n")
  end
}


%_anda_srpm_macros_dir /usr/libexec/anda-srpm-macros


# pkg_devel -n %name-devel -N %name
# -n <pkgname>: name of the devel package
# -N <mainpkg>: name of the main package
%pkg_devel_files(n:N:) %{lua:
  local main = rpm.expand("%{?-N:%{-N*}}%{!?-N:%name}")
  local name = rpm.expand("%{?-n:%{-n*}}%{!?-n:%name-devel}")
  print("Summary: Development files for "..main.."\\n\\n")
  print("%description -n "..name.."\\n")
  print("The "..name.." package contains libraries and header files for\\n")
  print("developing applications that use "..main..".\\n\\n")
  print("%files -n "..name.." -f anda-develfiles.list\\n")
  local __spec_install_post = rpm.expand("%macrobody __spec_install_post")
  rpm.define("__spec_install_post ".."%{__anda_develfiles}%{quote:"..__spec_install_post.."}")
}

# files_devel -n %name-libs
%files_devel(n:) %{lua:
  local name = rpm.expand("%{?-n:%{-n*}}%{!?-n:%name-devel}")
  print("%files -n "..name.." -f anda-develfiles.list\\n")
  local __spec_install_post = rpm.expand("%macrobody __spec_install_post")
  rpm.define("__spec_install_post ".."%{__anda_develfiles}%{quote:"..__spec_install_post.."}")
}

%__anda_develfiles (%_anda_srpm_macros_dir/find-develinfo.sh %buildroot > anda-develfiles.list)


# pkg_static -n %name-static -N %name
# -n <pkgname>: name of the static package
# -N <mainpkg>: name of the main package
%pkg_static_files(n:N:) %{lua:
  local main = rpm.expand("%{?-N:%{-N*}}%{!?-N:%name}")
  local name = rpm.expand("%{?-n:%{-n*}}%{!?-n:%name-static}")
  print("Summary: Static libraries for "..main.."\\n\\n")
  print("%description -n "..name.."\\n")
  print("Static library files for "..name..".\\n\\n")
  print("%files -n "..name.." -f anda-staticfiles.list\\n")
  local __spec_install_post = rpm.expand("%macrobody __spec_install_post")
  rpm.define("__spec_install_post ".."%{__anda_staticfiles}%{quote:"..__spec_install_post.."}")
}

# files_static -n %name-libs
%files_static(n:) %{lua:
  local name = rpm.expand("%{?-n:%{-n*}}%{!?-n:%name-static}")
  print("%files -n "..name.." -f anda-staticfiles.list\\n")
  local __spec_install_post = rpm.expand("%macrobody __spec_install_post")
  rpm.define("__spec_install_post ".."%{__anda_staticfiles}%{quote:"..__spec_install_post.."}")
}

%__anda_staticfiles %_anda_srpm_macros_dir/find-staticinfo.sh %buildroot > anda-staticfiles.list


# pkg_libs -n %name-libs -N %name
# -n <pkgname>: name of the libs package
# -N <mainpkg>: name of the main package
%pkg_libs_files(n:N:) %{lua:
  local main = rpm.expand("%{?-N:%{-N*}}%{!?-N:%name}")
  local name = rpm.expand("%{?-n:%{-n*}}%{!?-n:%name-libs}")
  print("Summary: Runtime libraries for "..main.."\\n\\n")
  print("%description -n "..name.."\\n")
  print("Runtime library files for "..name..".\\n\\n")
  print("%files -n "..name.." -f anda-libsfiles.list\\n")
  local __spec_install_post = rpm.expand("%macrobody __spec_install_post")
  rpm.define("__spec_install_post ".."%{__anda_libsfiles}%{quote:"..__spec_install_post.."}")
}

# files_libs -n %name-libs
%files_libs(n:) %{lua:
  local name = rpm.expand("%{?-n:%{-n*}}%{!?-n:%name-libs}")
  print("%files -n "..name.." -f anda-libsfiles.list\\n")
  local __spec_install_post = rpm.expand("%macrobody __spec_install_post")
  rpm.define("__spec_install_post ".."%{__anda_libsfiles}%{quote:"..__spec_install_post.."}")
}

%__anda_libsfiles %_anda_srpm_macros_dir/find-libsinfo.sh %buildroot > anda-libsfiles.list
