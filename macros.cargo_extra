%cargo_prep_online (\
set -eu \
%{__mkdir} -p .cargo \
cat > .cargo/config << EOF \
[profile.rpm]\
inherits = "release"\
opt-level = %{rustflags_opt_level}\
codegen-units = %{rustflags_codegen_units}\
debug = %{rustflags_debuginfo}\
strip = "none"\
\
\
[build]\
rustc = "%{__rustc}"\
rustdoc = "%{__rustdoc}"\
\
[env]\
CFLAGS = "%{build_cflags}"\
CXXFLAGS = "%{build_cxxflags}"\
LDFLAGS = "%{build_ldflags}"\
\
[install]\
root = "%{buildroot}%{_prefix}"\
\
[term]\
verbose = true\
\
[source]\
\
[source.local-registry]\
directory = "%{cargo_registry}"\
\
EOF\
%{__rm} -f Cargo.toml.orig \
%{lua: 
if rpm.expand("%{fedora}"):find("^%d") then 
rpm.define("build_rustflags " .. rpm.expand("%build_rustflags %[%{with mold} ? \\"-C link-arg=-fuse-ld=mold\\" : \\"\\"]"))
end}\
)



# cargo_license: print license information for all crate dependencies
#
# The "no-build,no-dev,no-proc-macro" argument results in only crates which are
# linked into the final binary to be considered.
#
# Additionally, deprecated SPDX syntax ("/" instead of "OR") is normalized
# before sorting the results to ensure reproducible output of this macro.
#
# This macro must be called with the same feature flags as other cargo macros,
# in particular, "cargo_build", otherwise its output will be incomplete.
#
# The "cargo tree" command called by this macro will fail if there are missing
# (optional) dependencies.
%cargo_license_online(naf:)\
(\
set -euo pipefail\
%{shrink:                                                                                  \
    %{__cargo} tree                                                                        \
    -Z avoid-dev-deps                                                                      \
    --workspace                                                                            \
    --edges no-build,no-dev,no-proc-macro                                                  \
    --no-dedupe                                                                            \
    --target all                                                                           \
    %{__cargo_parse_opts %{-n} %{-a} %{-f:-f%{-f*}}}                                       \
    --prefix none                                                                          \
    --format "{l}: {p}"                                                                    \
    | sed -e "s: ($(pwd)[^)]*)::g" -e "s: / :/:g" -e "s:/: OR :g" -e "\\|/.*:|{s|/| OR |}" \
    | sort -u                                                                              \
}\
)

# cargo_license_summary: print license summary for all crate dependencies
#
# This macro works in the same way as cargo_license, except that it only prints
# a list of licenses, and not the complete license information for every crate
# in the dependency tree. This is useful for determining the correct License
# tag for packages that contain compiled Rust binaries.
%cargo_license_summary_online(naf:)\
(\
set -euo pipefail\
%{shrink:                                                           \
    %{__cargo} tree                                                 \
    -Z avoid-dev-deps                                               \
    --workspace                                                     \
    --edges no-build,no-dev,no-proc-macro                           \
    --no-dedupe                                                     \
    --target all                                                    \
    %{__cargo_parse_opts %{-n} %{-a} %{-f:-f%{-f*}}}                \
    --prefix none                                                   \
    --format "# {l}"                                                \
    | sed -e "s: / :/:g" -e "s:/: OR :g" -e "\\|/.*:|{s|/| OR |}"   \
    | sort -u                                                       \
}\
)

# cargo_vendor_manifest: write list of vendored crates and their versions
#
# The arguments for the internal "cargo tree" call emulate the logic
# that determines which crates are included when running "cargo vendor".
# The results are written to "cargo-vendor.txt".
%cargo_vendor_manifest_online()\
(\
set -euo pipefail\
%{shrink:                                                           \
    %{__cargo} tree                                                 \
    --workspace                                                     \
    --edges normal,build,dev                                        \
    --no-dedupe                                                     \
    --target all                                                    \
    --all-features                                                  \
    --prefix none                                                   \
    --format "{p}"                                                  \
    | grep -v "$(pwd)"                                              \
    | sed -e "s: (proc-macro)::"                                    \
    | sort -u                                                       \
    > cargo-vendor.txt                                              \
}\
)

# applicable to specs generated using rust2rpm
# where installing crate source as library is unnecessary, use this macro
# to install crates that build as single binary
%crate_install_bin (\
%{__install} -m 0755 target/rpm/%{?crate} -D %{buildroot}%{_bindir}/%{?crate} \
)

%rustup_nightly \
    %global __cargo /usr/bin/env CARGO_HOME=.cargo RUSTC_BOOTSTRAP=1 RUSTFLAGS='%{build_rustflags}' $HOME/.cargo/bin/cargo \
    %global __rustc $HOME/.cargo/bin/rustc      \
    %global __rustdoc $HOME/.cargo/bin/rustdoc  \
    rustup-init --default-toolchain nightly -y  \
    . "$HOME/.cargo/env"                        \
    rustup override set nightly
