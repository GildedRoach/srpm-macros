# Evaluation macro to expand later and a bcond for if Electron is bundled or not for meta/license macros so they can be used for Electron itself
# with_bundled_electron alone does not work because the name macro is defined in the spec itself
%is_electron_bundled() %bcond bundled_electron %["%{name}" != "electron"]

%electron_arches %{x86_64} %{ix86} aarch64 armv7l armv7hl armv7hnl

## NOTE: Best for pure Electron programs. If packages use binaries not made with Electron Builder, when using this Macro care must be taken to not cause overlapping licenses.
# The SOURCE LICENSE of Electron is MIT. However, as it uses Chromium code, the Chromium license comes bundled with it and all Electron apps. Electron ALSO bundles FFmpeg and code from vulkan-loader.
# REMEMBER to add the license of the app itself if it is not covered here!
## In order, the bundled licenses:
# vulkan-loader: Apache-2.0
# FFmpeg: LGPL-3.0-or-later
# Electron itself: MIT
# Bundled Electron: MIT AND (BSD-3-Clause AND LGPL-2.1-or-later AND Apache-2.0 AND IJG AND MIT AND GPL-2.0-or-later AND ISC AND OpenSSL AND (MPL-1.1 OR GPL-2.0-only OR LGPL-2.0-only))
# Chromium: BSD-3-Clause AND LGPL-2.1-or-later AND Apache-2.0 AND IJG AND MIT AND GPL-2.0-or-later AND ISC AND OpenSSL AND (MPL-1.1 OR GPL-2.0-only OR LGPL-2.0-only)
%electron_license %{is_electron_bundled}%{?with_bundled_electron:%{shrink:
Apache-2.0
AND
LGPL-3.0-or-later
AND
MIT
AND
(MIT AND (BSD-3-Clause AND LGPL-2.1-or-later AND Apache-2.0 AND IJG AND MIT AND GPL-2.0-or-later AND ISC AND OpenSSL AND (MPL-1.1 OR GPL-2.0-only OR LGPL-2.0-only)))}}%{!?with_bundled_electron:%{shrink:
Apache-2.0
AND
LGPL-3.0-or-later
AND
MIT
AND
(BSD-3-Clause AND LGPL-2.1-or-later AND Apache-2.0 AND IJG AND MIT AND GPL-2.0-or-later AND ISC AND OpenSSL AND (MPL-1.1 OR GPL-2.0-only OR LGPL-2.0-only))}}

## Note: This does NOT automatically pull Bun/PNPM/Yarn or any other build dependencies. Those must be specified, this meta macro only sets the bare minimum that is consistently needed for Electron builds.
# nodejs-packaging is REQUIRED if using NodeJS macros
# Package requirements are only the requirements for Electron itself. Electron apps may have additional requirements.
%electronmeta()                                                                                                       \
%global __provides_exclude ^((libffmpeg[.]so.*)|(lib.*\\.so.*))$                                                      \
%{lua:
  if not macros["_target_cpu"]:find('aarch64') and not macros["_target_cpu"]:find('armv7') then
    for arch in string.gmatch(macros["x86_64"], "%S+") do
      if macros["_target_cpu"] == arch then
        macros["__requires_exclude"] = '^((libffmpeg[.]so.*)|(lib.*\\\\.so.*)|(.*\\\\aarch64*\\\\so.*))$'
        macros["_electron_cpu"] = 'x64'
      end
    end
    for arch in string.gmatch(macros["ix86"], "%S+") do
      if macros["_target_cpu"] == arch then
        macros["__requires_exclude"] = '^((libffmpeg[.]so.*)|(lib.*\\\\.so.*)|(.*\\\\x86_64*\\\\.so.*)|(.*\\\\x86-64*\\\\.so.*)|(.*\\\\aarch64*\\\\so.*))$'
        macros["_electron_cpu"] = 'ia32'
      end
    end
  elseif macros["_target_cpu"]:find('aarch64') then
    macros["__requires_exclude"] = '^((libffmpeg[.]so.*)|(lib.*\\\\.so.*)|(.*\\\\x86_64*\\\\.so.*)|(.*\\\\x86-64*\\\\.so.*))$'
    macros["_electron_cpu"] = 'arm64'
    print("BuildRequires: zlib-ng-compat-devel")
  elseif macros["_target_cpu"]:find('armv7') then
    macros["__requires_exclude"] = '^((libffmpeg[.]so.*)|(lib.*\\\\.so.*)|(.*\\\\x86_64*\\\\.so.*)|(.*\\\\x86-64*\\\\.so.*)|(.*\\\\aarch64*\\\\so.*))$'
    macros["_electron_cpu"] = 'armv7l'
    print("BuildRequires: zlib-ng-compat-devel")
  end}                                                                                                                \
%{is_electron_bundled}%{?with_bundled_electron:%{expand:BuildRequires: desktop-file-utils
BuildRequires: gcc
BuildRequires: gcc-c++
BuildRequires: git-core
BuildRequires: make
BuildRequires: nodejs
BuildRequires: nodejs-npm
BuildRequires: python3}}                                                                                              \
Requires:      at-spi2-core                                                                                           \
Requires:      c-ares                                                                                                 \
Requires:      gtk3%{!?with_bundled_electron:%{expand:
Requires:      minizip}}                                                                                              \
Requires:      libnotify                                                                                              \
Requires:      (libuuid or libuuid1)                                                                                  \
Requires:      libnotify                                                                                              \
Requires:      libXScrnSaver                                                                                          \
Requires:      (libXtst or libXtst6)                                                                                  \
Requires:      nss                                                                                                    \
Requires:      re2                                                                                                    \
Requires:      xdg-utils                                                                                              \
%{?with_bundled_electron:Provides:      bundled(electron)}%{!?with_bundled_electron:Provides:      bundled(chromium)} \
Provides:      bundled(ffmpeg)                                                                                        \
Provides:      bundled(vulkan-loader)                                                                                 \
ExclusiveArch: %{electron_arches}

# NPM is usually NOT how Electron projects are built and almost any other build system is preferrable. NPM because of NPM's limitations the -r or -e flags MUST be used.
# -c: "CI." Boolean to use npm ci instead of npm install. Needed for some packages.
# -e: "Exec." Execute commands though NPM directly.
# -r: "Run." Project-specific scripts to run.
%npm_build(cer:)                                                                                                                       \
%{__npm} %{!?-c:install}%{?-c:ci} --no-audit                                                                                           \
%{!?-e:%{!?-r:%{error:Due to limitations with NPM commands MUST be passed to npm exec or npm run directly using the -e or -r flags.}}} \
%{lua:
  if opt.e then
    print("HOME=" .. macros["rpmbuilddir"] .. " " .. macros["__npm"] .. " exec")
    for i, cmd in ipairs(arg) do
      print(" " .. cmd)
    end
    print("\\n")
  end}                                                                                                                                  \
%{-r:HOME=%{rpmbuilddir} %{__npm} run %{-r*}}

# -e: "Exec." Execute commands though Bun directly. Not recommended for Electron Builder/Electron Vite commands.
# -F: "Frozen lockfile." Build with a frozen lockfile.
# -N: "No frozen lockfile." Override a project's frozen lockfile to build with an unfrozen one.
# -r: "Run." Project-specific scripts to run. Not recommended for Electron Builder/Electron Vite commands.
# -v: "Vite." Run electron-vite builds
%bun_build(eFNr:v)                                                                             \
%{-F:%{-N:%{error:Can't use both -F and -N}}}                                                  \
%{__bun} install %{-F:--frozen-lockfile}%{-N:--no-frozen-lockfile}                             \
%{lua:
  if opt.e then
    print(macros["__bun"])
    for i, cmd in ipairs(arg) do
      print(" " .. cmd)
    end
    print("\\n")
  end}                                                                                         \
%{-r:%{__bun} run %{-r*}}                                                                      \
%{-v:HOME=%{rpmbuilddir} %{__bun} electron-vite build}                                         \
HOME=%{rpmbuilddir} %{__bun} electron-builder --linux --%{_electron_cpu} --dir --publish=never

# -e: "Exec." Execute commands though PNPM directly. Not recommended for Electron Builder/Electron Vite commands.
# -F: "Frozen lockfile." Build with a frozen lockfile.
# -N: "No frozen lockfile." Override a project's frozen lockfile to build with an unfrozen one.
# -r: "Run." Project-specific scripts to run. Not recommended for Electron Builder/Electron Vite commands.
# -v: "Vite." Run electron-vite builds.
%pnpm_build(eFNr:v)                                                                              \
%{-F:%{-N:%{error:Can't use both -F and -N}}}                                                    \
%{__pnpm} install %{-F:--frozen-lockfile}%{-N:--no-frozen-lockfile}                              \
%{lua:
  if opt.e then
    print(macros["__pnpm"])
    for i, cmd in ipairs(arg) do
      print(" " .. cmd)
    end
    print("\\n")
  end}                                                                                          \
%{-r:%{__pnpm} run %{-r*}}                                                                      \
%{-v:HOME=%{rpmbuilddir} %{__pnpm} electron-vite build}                                         \
HOME=%{rpmbuilddir} %{__pnpm} electron-builder --linux --%{_electron_cpu} --dir --publish=never

# -e: "Exec." Execute commands though Yarn directly. Not recommended for Electron Builder/Electron Vite commands.
# -F: "Frozen lockfile." Build with a frozen lockfile.
# -N: "No frozen lockfile." Override a project's frozen lockfile to build with an unfrozen one.
# -r: "Run." Project-specific scripts to run. Not recommended for Electron Builder/Electron Vite commands.
# -v: "Vite." Run electron-vite builds.
%yarn_build(eFNr:v)                                                                             \
%{-F:%{-N:%{error:Can't use both -F and -N}}}                                                   \
%{__yarn} install %{-F:--frozen-lockfile}%{-N:--no-frozen-lockfile}                             \
%{lua:
  if opt.e then
    print(macros["__yarn"])
    for i, cmd in ipairs(arg) do
      print(" " .. cmd)
    end
    print("\\n")
  end}                                                                                          \
%{-r:%{__yarn} run %{-r*}}                                                                      \
%{-v:HOME=%{rpmbuilddir} %{__yarn} electron-vite build}                                         \
HOME=%{rpmbuilddir} %{__yarn} electron-builder --linux --%{_electron_cpu} --dir --publish=never

# If no alternative names are provided via flag everything fals back to the name set by the spec
# -b: "Binary." Name of the actual executable file.
# -d: "Directory." Choose a different name for the install directory in /usr/share
# -D: "Desktop file." Handle automatic installation of .desktop file.
# -E: "Enable features." For use with desktop file install. Comma separated.
# -F: Additional flags. Examples: no-sandbox disable-gpu-sandbox
# -O: "Ozone platform." For use with desktop file install. Default is "auto." Some programs MUST fall back to X11 for various reasons. Example: %%electron_install -O OR %%electron_install -Ox11
# -U:  Set %u or %U in the desktop file.
# -i: "Icons." Choose a different name to install the icon files under.
# -l: "Licenses." Use this if you want to collect all extra licenses into a directory called bundled_licenses automatically to package them via RPM. DOES NOT include build dep licenses.
# -s: "Symlink." Name of the symlink to the executable.
# -S: Additional symlink to the binary. ONLY do this if a program has two common names, i.e, Heroic being called both "heroic" and "heroic-games-launcher"
%electron_install(b:d:DE:Fi:lO::s:S:U:) %{lua:
   local bin = macros["-b*"] or macros["name"]
   local dir = macros["-d*"] or macros["name"]
   local installdir = macros["_libdir"] .. "/" .. dir
   local link = macros["-s*"] or macros["name"]
   local arch = macros["_electron_cpu"]
   print("mkdir -p " .. rpm.expand("%{buildroot}") .. installdir .. "\\n")
   -- Wildcards for linux-*unpacked CANNOT be used because Electron projects can build multiple architectures at once!
   if arch ~= 'x64' then
     print("cp -pr dist/linux-" .. arch .. "-unpacked/* -t " .. installdir .. "\\n")
   else
     print("cp -pr dist/linux-unpacked/* -t " .. rpm.expand("%{buildroot}") .. installdir .. "\\n")
   end
   print("mkdir -p " .. rpm.expand("%{buildroot}%{_bindir}") .. "\\n")
   print("ln -sf " .. installdir .. "/" .. bin .. rpm.expand(" %{buildroot}%{_bindir}/") .. link .. "\\n")
   if opt.S then
     print("ln -sf " .. installdir .. "/" .. bin .. rpm.expand(" %{buildroot}%{_bindir}/") .. macros["-S*"] .. "\\n")
   end
   if opt.D then
   -- Wildcards cannot be used here for similar reasons.
     if arch == 'arm64' or arch == 'armv7l' then
       print("dist/*" .. arch .. ".AppImage --appimage-extract '*.desktop'\\n")
     elseif arch == 'ia32' then
       print("dist/*i386.AppImage --appimage-extract '*.desktop'\\n")
     elseif arch == 'x64' then
       print("dist/*x86_64.AppImage --appimage-extract '*.desktop'\\n")
     end
   if opt.F then
     if not arg[1] then
       error("Extra flags not supplied.")
     else
       macros["desktop_file_args"] = table.concat(arg, " --")
     end
   end
   print("desktop-file-install --set-key=Exec --set-value=\\"" .. installdir .. "/" .. bin .. rpm.expand("%{?-E: --enable=features=%{-E*}}") .. rpm.expand("%{?-O:%{!?-O*: --ozone-platform-hint=auto}}%{?-O:%{?-O*: --ozone-platform=%{-O*}}}")  .. rpm.expand("%{?-U: %{-U*}}") .. rpm.expand("%{?desktop_file_args: --%{desktop_file_args}}") .. "\\"" .. " squashfs-root/*.desktop")
   end}                                                                                                                                                                                          \
%{?-l:export LICENSE_DIR=bundled_licenses && mkdir $LICENSE_DIR}                                                                                                                                 \
%{?-l:find ./*/ -iname "*LICENSE*" -type f ! -name "*.zip" ! -path "./node_modules/*" ! -path "./public/*" ! -name "$LICENSE_DIR" ! -path "./$LICENSE_DIR/*" -exec cp -p -t "$LICENSE_DIR" {} +} \
%{__install} -Dm644 dist/.icon-set/icon_*16.png %{buildroot}%{_iconsdir}/hicolor/16x16/apps/%{?-i:%{-i*}}%{!?-i:%{name}}.png                                                                     \
%{__install} -Dm644 dist/.icon-set/icon_*32.png %{buildroot}%{_iconsdir}/hicolor/32x32/apps/%{?-i:%{-i*}}%{!?-i:%{name}}.png                                                                     \
%{__install} -Dm644 dist/.icon-set/icon_*48.png %{buildroot}%{_iconsdir}/hicolor/48x48/apps/%{?-i:%{-i*}}%{!?-i:%{name}}.png                                                                     \
%{__install} -Dm644 dist/.icon-set/icon_*64.png %{buildroot}%{_iconsdir}/hicolor/64x64/apps/%{?-i:%{-i*}}%{!?-i:%{name}}.png                                                                     \
%{__install} -Dm644 dist/.icon-set/icon_*128.png %{buildroot}%{_iconsdir}/hicolor/128x128/apps/%{?-i:%{-i*}}%{!?-i:%{name}}.png                                                                  \
%{__install} -Dm644 dist/.icon-set/icon_*256.png %{buildroot}%{_iconsdir}/hicolor/256x256/apps/%{?-i:%{-i*}}%{!?-i:%{name}}.png                                                                  \
%{__install} -Dm644 dist/.icon-set/icon_*512.png %{buildroot}%{_iconsdir}/hicolor/512x512/apps/%{?-i:%{-i*}}%{!?-i:%{name}}.png                                                                  \
%{__install} -Dm644 dist/.icon-set/icon_*1024.png %{buildroot}%{_iconsdir}/hicolor/1024x1024/apps/%{?-i:%{-i*}}%{!?-i:%{name}}.png
